OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
shader eggDisplacement
oparam	float	resultF	0		%read{2,78} %write{2,78}
global	point	P	%read{4,4} %write{2147483647,-1}
global	float	v	%read{0,0} %write{2147483647,-1}
local	float	littleEnd	%read{1,1} %write{0,0}
local	float	littleEndVal	%read{2,2} %write{1,1}
local	point	UVW	%read{12,12} %write{4,4}
local	float	Scale	%read{12,12} %write{5,5}
local	float	Radius	%read{16,78} %write{6,6}
local	int	RandomOverlap	%read{16,78} %write{7,7}
local	float	BumpAmount	%read{16,78} %write{8,8}
local	float	BumpShape	%read{16,78} %write{9,9}
local	float	Dots	%read{16,78} %write{10,78}
local	float	Dist	%read{16,78} %write{11,78}
local	point	pnt	%read{16,78} %write{12,12}
local	float	pri	%read{16,78} %write{13,78}
local	float	___325_x	%read{16,78} %write{15,78}
local	float	___327_y	%read{16,78} %write{16,78}
local	float	___329_z	%read{16,78} %write{16,78}
local	point	___330_rndpoint	%read{16,78} %write{16,78}
local	point	___330_dotcenter	%read{16,78} %write{16,78}
local	float	___330_dist	%read{16,78} %write{16,78}
local	float	___330_priority	%read{16,78} %write{16,78}
const	float	$const1	0.00100000005		%read{0,29} %write{2147483647,-1}
const	float	$const2	0.49000001		%read{0,0} %write{2147483647,-1}
const	float	$const4	4		%read{1,1} %write{2147483647,-1}
const	int	$const5	0		%read{7,70} %write{2147483647,-1}
const	float	$const6	0		%read{1,1} %write{2147483647,-1}
const	string	$const7	"object"		%read{4,4} %write{2147483647,-1}
const	string	$const8	"transform"		%read{3,3} %write{2147483647,-1}
const	string	$const9	"common"		%read{4,4} %write{2147483647,-1}
const	float	$const10	0.00999999978		%read{5,5} %write{2147483647,-1}
const	float	$const11	0.300000012		%read{6,6} %write{2147483647,-1}
const	float	$const12	1		%read{8,78} %write{2147483647,-1}
const	int	$const13	-1		%read{13,23} %write{2147483647,-1}
const	int	$const14	1		%read{16,24} %write{2147483647,-1}
temp	int	$tmp1	%read{16,78} %write{16,78}
temp	int	$tmp2	%read{14,78} %write{15,78}
temp	int	$tmp3	%read{16,78} %write{16,78}
temp	int	$tmp4	%read{16,78} %write{16,78}
temp	int	$tmp5	%read{16,78} %write{16,78}
temp	int	$tmp6	%read{16,78} %write{16,78}
temp	point	$tmp7	%read{16,78} %write{16,78}
temp	point	$tmp8	%read{16,78} %write{16,78}
temp	point	$tmp9	%read{16,78} %write{16,78}
temp	vector	$tmp10	%read{16,78} %write{16,78}
const	string	$const15	"cell"		%read{30,33} %write{2147483647,-1}
const	float	$const17	2		%read{33,33} %write{2147483647,-1}
temp	int	$tmp11	%read{16,78} %write{16,78}
temp	int	$tmp12	%read{16,78} %write{16,78}
temp	int	$tmp13	%read{16,78} %write{16,78}
temp	int	$tmp14	%read{16,78} %write{16,78}
temp	float	$tmp15	%read{16,78} %write{16,78}
temp	float	$tmp16	%read{16,78} %write{16,78}
temp	float	$tmp17	%read{16,78} %write{16,78}
const	float	$const18	1.58000004		%read{44,64} %write{2147483647,-1}
temp	float	$tmp18	%read{16,78} %write{16,78}
temp	float	$tmp19	%read{16,78} %write{16,78}
const	float	$const19	0.0399999991		%read{48,48} %write{2147483647,-1}
temp	float	$tmp20	%read{16,78} %write{16,78}
temp	int	$tmp21	%read{16,78} %write{16,78}
temp	int	$tmp22	%read{16,78} %write{16,78}
temp	int	$tmp23	%read{16,78} %write{16,78}
temp	int	$tmp24	%read{16,78} %write{16,78}
temp	int	$tmp25	%read{16,78} %write{16,78}
temp	float	$tmp26	%read{16,78} %write{16,78}
temp	float	$tmp27	%read{16,78} %write{16,78}
temp	float	$tmp28	%read{16,78} %write{16,78}
temp	float	$tmp29	%read{16,78} %write{16,78}
temp	float	$tmp30	%read{16,78} %write{16,78}
const	float	$const20	0.0299999993		%read{68,68} %write{2147483647,-1}
temp	int	$tmp31	%read{16,78} %write{16,78}
temp	float	$tmp32	%read{2147483647,-1} %write{16,78}
temp	float	$tmp33	%read{2147483647,-1} %write{16,78}
temp	float	$tmp34	%read{2147483647,-1} %write{16,78}
code ___main___
# eggDisplacement.osl:9
#     float littleEnd = smoothstep(0.001,0.49,v);
	smoothstep	littleEnd $const1 $const2 v 	%filename{"eggDisplacement.osl"} %line{9} %argrw{"wrrr"}
# eggDisplacement.osl:10
#     float littleEndVal = mix(4, 0, littleEnd);
	mix		littleEndVal $const4 $const6 littleEnd 	%line{10} %argrw{"wrrr"}
# eggDisplacement.osl:12
#     resultF += littleEndVal;
	add		resultF resultF littleEndVal 	%line{12} %argrw{"wrr"}
# eggDisplacement.osl:21
#     point UVW    = transform("object", P);
	functioncall	$const8 5 	%line{21} %argrw{"r"}
# /opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h:285
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	UVW $const9 $const7 P 	%filename{"/opt/pixar/RenderManProServer-25.2/lib/osl/include/stdosl.h"} %line{285} %argrw{"wrrr"}
# eggDisplacement.osl:22
# 	float Scale  = 0.01;
	assign		Scale $const10 	%filename{"eggDisplacement.osl"} %line{22} %argrw{"wr"}
# eggDisplacement.osl:23
# 	float Radius = 0.3;
	assign		Radius $const11 	%line{23} %argrw{"wr"}
# eggDisplacement.osl:24
# 	int   RandomOverlap = 0;
	assign		RandomOverlap $const5 	%line{24} %argrw{"wr"}
# eggDisplacement.osl:25
# 	float BumpAmount = 1.0;
	assign		BumpAmount $const12 	%line{25} %argrw{"wr"}
# eggDisplacement.osl:26
# 	float BumpShape  = 1.0;
	assign		BumpShape $const12 	%line{26} %argrw{"wr"}
# eggDisplacement.osl:27
#     float Dots=0;
	assign		Dots $const5 	%line{27} %argrw{"wr"}
# eggDisplacement.osl:29
# 	float Dist = 0;
	assign		Dist $const5 	%line{29} %argrw{"wr"}
# eggDisplacement.osl:31
#     point pnt = UVW / Scale;	
	div		pnt UVW Scale 	%line{31} %argrw{"wrr"}
# eggDisplacement.osl:32
# 	float pri = -1;
	assign		pri $const13 	%line{32} %argrw{"wr"}
# eggDisplacement.osl:34
#   	for (float x = -1; x <= 1; x++)
	for		$tmp2 16 18 77 79 	%line{34} %argrw{"r"}
	assign		___325_x $const13 	%argrw{"wr"}
	le		$tmp1 ___325_x $const14 	%argrw{"wrr"}
	neq		$tmp2 $tmp1 $const5 	%argrw{"wrr"}
# eggDisplacement.osl:36
#     	for (float y = -1; y <= 1; y++)
	for		$tmp4 20 22 75 77 	%line{36} %argrw{"r"}
	assign		___327_y $const13 	%argrw{"wr"}
	le		$tmp3 ___327_y $const14 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const5 	%argrw{"wrr"}
# eggDisplacement.osl:38
# 			for(float z = -1; z <= 1; z++)
	for		$tmp6 24 26 73 75 	%line{38} %argrw{"r"}
	assign		___329_z $const13 	%argrw{"wr"}
	le		$tmp5 ___329_z $const14 	%argrw{"wrr"}
	neq		$tmp6 $tmp5 $const5 	%argrw{"wrr"}
# eggDisplacement.osl:41
# 				point rndpoint = floor(pnt) + point(x, y, z) + 0.001;				
	floor		$tmp7 pnt 	%line{41} %argrw{"wr"}
	point		$tmp8 ___325_x ___327_y ___329_z 	%argrw{"wrrr"}
	add		$tmp9 $tmp7 $tmp8 	%argrw{"wrr"}
	add		___330_rndpoint $tmp9 $const1 	%argrw{"wrr"}
# eggDisplacement.osl:43
# 				point dotcenter = rndpoint + noise("cell", rndpoint, 1);				      
	noise		$tmp10 $const15 ___330_rndpoint $const12 	%line{43} %argrw{"wrrr"}
	add		___330_dotcenter ___330_rndpoint $tmp10 	%argrw{"wrr"}
# eggDisplacement.osl:44
# 				float dist      = distance(dotcenter, pnt);
	distance	___330_dist ___330_dotcenter pnt 	%line{44} %argrw{"wrr"}
# eggDisplacement.osl:46
# 				float priority = noise("cell", rndpoint, 2);
	noise		___330_priority $const15 ___330_rndpoint $const17 	%line{46} %argrw{"wrrr"}
# eggDisplacement.osl:48
# 				if (dist < Radius && priority > pri)
	lt		$tmp11 ___330_dist Radius 	%line{48} %argrw{"wrr"}
	neq		$tmp12 $tmp11 $const5 	%argrw{"wrr"}
	if		$tmp12 40 40 	%argrw{"r"}
	gt		$tmp13 ___330_priority pri 	%argrw{"wrr"}
	neq		$tmp14 $tmp13 $const5 	%argrw{"wrr"}
	assign		$tmp12 $tmp14 	%argrw{"wr"}
	if		$tmp12 54 54 	%argrw{"r"}
# eggDisplacement.osl:50
# 					pri = priority;
	assign		pri ___330_priority 	%line{50} %argrw{"wr"}
# eggDisplacement.osl:51
#                     Dist   = dist / Radius;
	div		Dist ___330_dist Radius 	%line{51} %argrw{"wrr"}
# eggDisplacement.osl:52
# 					Dots = pow(sin((1.0 - Dist) * 1.58), BumpShape) * BumpAmount*0.04;
	sub		$tmp17 $const12 Dist 	%line{52} %argrw{"wrr"}
	mul		$tmp18 $tmp17 $const18 	%argrw{"wrr"}
	sin		$tmp16 $tmp18 	%argrw{"wr"}
	pow		$tmp15 $tmp16 BumpShape 	%argrw{"wrr"}
	mul		$tmp19 $tmp15 BumpAmount 	%argrw{"wrr"}
	mul		Dots $tmp19 $const19 	%argrw{"wrr"}
# eggDisplacement.osl:54
#                     resultF += -Dots;
	neg		$tmp20 Dots 	%line{54} %argrw{"wr"}
	add		resultF resultF $tmp20 	%argrw{"wrr"}
# eggDisplacement.osl:56
# 					if (!RandomOverlap)
	eq		$tmp21 RandomOverlap $const5 	%line{56} %argrw{"wrr"}
	if		$tmp21 54 54 	%argrw{"r"}
# eggDisplacement.osl:57
# 						return;
	exit	%line{57}
# eggDisplacement.osl:60
#                 if (dist < Radius && priority > pri)
	lt		$tmp22 ___330_dist Radius 	%line{60} %argrw{"wrr"}
	neq		$tmp23 $tmp22 $const5 	%argrw{"wrr"}
	if		$tmp23 60 60 	%argrw{"r"}
	gt		$tmp24 ___330_priority pri 	%argrw{"wrr"}
	neq		$tmp25 $tmp24 $const5 	%argrw{"wrr"}
	assign		$tmp23 $tmp25 	%argrw{"wr"}
	if		$tmp23 73 73 	%argrw{"r"}
# eggDisplacement.osl:62
# 					pri = priority;
	assign		pri ___330_priority 	%line{62} %argrw{"wr"}
# eggDisplacement.osl:63
#                     Dist   = dist / Radius;
	div		Dist ___330_dist Radius 	%line{63} %argrw{"wrr"}
# eggDisplacement.osl:64
# 					Dots = pow(sin((1.0 - Dist) * 1.58), BumpShape) * BumpAmount*0.03;
	sub		$tmp28 $const12 Dist 	%line{64} %argrw{"wrr"}
	mul		$tmp29 $tmp28 $const18 	%argrw{"wrr"}
	sin		$tmp27 $tmp29 	%argrw{"wr"}
	pow		$tmp26 $tmp27 BumpShape 	%argrw{"wrr"}
	mul		$tmp30 $tmp26 BumpAmount 	%argrw{"wrr"}
	mul		Dots $tmp30 $const20 	%argrw{"wrr"}
# eggDisplacement.osl:66
#                     resultF += Dots;
	add		resultF resultF Dots 	%line{66} %argrw{"wrr"}
# eggDisplacement.osl:68
# 					if (!RandomOverlap)
	eq		$tmp31 RandomOverlap $const5 	%line{68} %argrw{"wrr"}
	if		$tmp31 73 73 	%argrw{"r"}
# eggDisplacement.osl:69
# 						return;
	exit	%line{69}
# eggDisplacement.osl:38
# 			for(float z = -1; z <= 1; z++)
	assign		$tmp32 ___329_z 	%line{38} %argrw{"wr"}
	add		___329_z ___329_z $const12 	%argrw{"wrr"}
# eggDisplacement.osl:36
#     	for (float y = -1; y <= 1; y++)
	assign		$tmp33 ___327_y 	%line{36} %argrw{"wr"}
	add		___327_y ___327_y $const12 	%argrw{"wrr"}
# eggDisplacement.osl:34
#   	for (float x = -1; x <= 1; x++)
	assign		$tmp34 ___325_x 	%line{34} %argrw{"wr"}
	add		___325_x ___325_x $const12 	%argrw{"wrr"}
	end
